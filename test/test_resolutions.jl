
df = DataFrame(a = 1:4, b = 'a':'d', c1 = [[float(i)] for i in 1:4])

ssa = s.SymbolSelection(:a)
ssb = s.SymbolSelection(:b)
ssc = s.SymbolSelection(:c1)
ssA = s.SymbolSelection(:a, true, s.ToSymbol(:A))
ssB = s.SymbolSelection(:b, true, s.ToSymbol(:B))
ssC = s.SymbolSelection(:c1, true, s.ToSymbol(:C1))
ssuA = s.SymbolSelection(:a, true, identity ∘ key_map(uppercase))
ssuB = s.SymbolSelection(:b, true, identity ∘ key_map(uppercase))
ssuC = s.SymbolSelection(:c1, true, identity ∘ key_map(uppercase))
s1 = s.IntSelection(1)
sr = s.RangeSelection(1, 2, 1, true)
sb = s.BoolSelection([true, false, true])
sfka = if_matches(r"a")
sfva = if_eltype(Int)

@testset "resolutions" begin
@testset "resolution single selections" begin
@test s.resolve(df, ssa) == s.PositiveSelectionArray([ssa])
@test s.resolve(df, s1) == s.PositiveSelectionArray([ssa])
@test s.resolve(df, sr) == s.PositiveSelectionArray([ssa, ssb])
@test s.resolve(df, sb) == s.PositiveSelectionArray([ssa, ssc])
@test s.resolve(df, sfva) == s.PositiveSelectionArray([ssa])
@test s.resolve(df, sfka) == s.PositiveSelectionArray([ssa])
@test s.resolve(df, -ssa) == s.PositiveSelectionArray([ssb, ssc])
@test s.resolve(df, -s1) == s.PositiveSelectionArray([ssb, ssc])
@test s.resolve(df, -sr) == s.PositiveSelectionArray([ssc])
@test s.resolve(df, -sb) == s.PositiveSelectionArray([ssb])
@test s.resolve(df, -sfva) == s.PositiveSelectionArray([ssb, ssc])
@test s.resolve(df, -sfka) == s.PositiveSelectionArray([ssb, ssc])
end
@testset "resolutions lenght-one array selections" begin
@test s.resolve(df, [ssa]) == s.PositiveSelectionArray([ssa])
@test s.resolve(df, [s1]) == s.PositiveSelectionArray([ssa])
@test s.resolve(df, [sr]) == s.PositiveSelectionArray([ssa, ssb])
@test s.resolve(df, [sb]) == s.PositiveSelectionArray([ssa, ssc])
@test s.resolve(df, [sfva]) == s.PositiveSelectionArray([ssa])
@test s.resolve(df, [sfka]) == s.PositiveSelectionArray([ssa])
@test s.resolve(df, [-ssa]) == s.PositiveSelectionArray([ssb, ssc])
@test s.resolve(df, [-s1]) == s.PositiveSelectionArray([ssb, ssc])
@test s.resolve(df, [-sr]) == s.PositiveSelectionArray([ssc])
@test s.resolve(df, [-sb]) == s.PositiveSelectionArray([ssb])
@test s.resolve(df, [-sfva]) == s.PositiveSelectionArray([ssb, ssc])
@test s.resolve(df, [-sfka]) == s.PositiveSelectionArray([ssb, ssc])
@test s.resolve(df, (ssa,)) == s.PositiveSelectionArray([ssa])
@test s.resolve(df, (s1,)) == s.PositiveSelectionArray([ssa])
@test s.resolve(df, (sr,)) == s.PositiveSelectionArray([ssa, ssb])
@test s.resolve(df, (sb,)) == s.PositiveSelectionArray([ssa, ssc])
@test s.resolve(df, (sfva,)) == s.PositiveSelectionArray([ssa])
@test s.resolve(df, (sfka,)) == s.PositiveSelectionArray([ssa])
@test s.resolve(df, (-ssa,)) == s.PositiveSelectionArray([ssb, ssc])
@test s.resolve(df, (-s1,)) == s.PositiveSelectionArray([ssb, ssc])
@test s.resolve(df, (-sr,)) == s.PositiveSelectionArray([ssc])
@test s.resolve(df, (-sb,)) == s.PositiveSelectionArray([ssb])
@test s.resolve(df, (-sfva,)) == s.PositiveSelectionArray([ssb, ssc])
@test s.resolve(df, (-sfka,)) == s.PositiveSelectionArray([ssb, ssc])
end
@testset "resolutions chains" begin
@test s.resolve(df, ssa | ssb | ssc) == s.PositiveSelectionArray([ssa, ssb, ssc])
@test s.resolve(df, ssa & ssb | ssc) == s.PositiveSelectionArray([ssc])
@test s.resolve(df, [ssa, ssb, ssc]) == s.PositiveSelectionArray([[ssa],[ssb],[ssc]])
@test s.resolve(df, [sr, sfva, sfka]) == s.PositiveSelectionArray([[ssa, ssb], [ssa], [ssa]])
@test s.resolve(df, [sr, sfva, [ssa, ssc]]) == s.PositiveSelectionArray([[ssa, ssb], [ssa], [[ssa], [ssc]]])
end
@testset "resolutions renamed" begin
@test s.resolve(df, ssa => :A) == s.PositiveSelectionArray([ssA])
@test s.resolve(df, s1 => :A) == s.PositiveSelectionArray([ssA])
@test s.resolve(df, sr => [:A, :B]) == s.PositiveSelectionArray([ssA, ssB])
@test s.resolve(df, sb => [:A, :C1]) == s.PositiveSelectionArray([ssA, ssC])
@test s.resolve(df, sfva => :A) == s.PositiveSelectionArray([ssA])
@test s.resolve(df, sfka => :A) == s.PositiveSelectionArray([ssA])
@test s.resolve(df, -ssa => [:B, :C1]) == s.PositiveSelectionArray([ssB, ssC])
@test s.resolve(df, -s1 => [:B, :C1]) == s.PositiveSelectionArray([ssB, ssC])
@test s.resolve(df, -sr => :C1) == s.PositiveSelectionArray([ssC])
@test s.resolve(df, -sb => :B) == s.PositiveSelectionArray([ssB])
@test s.resolve(df, -sfva => [:B, :C1]) == s.PositiveSelectionArray([ssB, ssC])
@test s.resolve(df, -sfka => [:B, :C1]) == s.PositiveSelectionArray([ssB, ssC])
@test s.resolve(df, [ssa] => :A) == s.PositiveSelectionArray([ssA])
@test s.resolve(df, [s1] => :A) == s.PositiveSelectionArray([ssA])
@test s.resolve(df, [sr] => [:A, :B]) == s.PositiveSelectionArray([ssA, ssB])
@test s.resolve(df, [sb] => [:A, :C1]) == s.PositiveSelectionArray([ssA, ssC])
@test s.resolve(df, [sfva] => :A) == s.PositiveSelectionArray([ssA])
@test s.resolve(df, [sfka] => :A) == s.PositiveSelectionArray([ssA])
@test s.resolve(df, [-ssa] => [:B, :C1]) == s.PositiveSelectionArray([ssB, ssC])
@test s.resolve(df, [-s1] => [:B, :C1]) == s.PositiveSelectionArray([ssB, ssC])
@test s.resolve(df, [-sr] => :C1) == s.PositiveSelectionArray([ssC])
@test s.resolve(df, [-sb] => :B) == s.PositiveSelectionArray([ssB])
@test s.resolve(df, [-sfva] => [:B, :C1]) == s.PositiveSelectionArray([ssB, ssC])
@test s.resolve(df, [-sfka] => [:B, :C1]) == s.PositiveSelectionArray([ssB, ssC])
@test s.resolve(df, (ssa,) => :A) == s.PositiveSelectionArray([ssA])
@test s.resolve(df, (s1,) => :A) == s.PositiveSelectionArray([ssA])
@test s.resolve(df, (sr,) => [:A, :B]) == s.PositiveSelectionArray([ssA, ssB])
@test s.resolve(df, (sb,) => [:A, :C1]) == s.PositiveSelectionArray([ssA, ssC])
@test s.resolve(df, (sfva,) => :A) == s.PositiveSelectionArray([ssA])
@test s.resolve(df, (sfka,) => :A) == s.PositiveSelectionArray([ssA])
@test s.resolve(df, (-ssa,) => [:B, :C1]) == s.PositiveSelectionArray([ssB, ssC])
@test s.resolve(df, (-s1,) => [:B, :C1]) == s.PositiveSelectionArray([ssB, ssC])
@test s.resolve(df, (-sr,) => :C1) == s.PositiveSelectionArray([ssC])
@test s.resolve(df, (-sb,) => :B) == s.PositiveSelectionArray([ssB])
@test s.resolve(df, (-sfva,) => [:B, :C1]) == s.PositiveSelectionArray([ssB, ssC])
@test s.resolve(df, (-sfka,) => [:B, :C1]) == s.PositiveSelectionArray([ssB, ssC])
@test s.resolve(df, ssa => key_map(uppercase)) == s.PositiveSelectionArray([ssuA])
@test s.resolve(df, s1 => key_map(uppercase)) == s.PositiveSelectionArray([ssuA])
@test s.resolve(df, sr => key_map(uppercase)) == s.PositiveSelectionArray([ssuA, ssuB])
@test s.resolve(df, sb => key_map(uppercase)) == s.PositiveSelectionArray([ssuA, ssuC])
@test s.resolve(df, sfva => key_map(uppercase)) == s.PositiveSelectionArray([ssuA])
@test s.resolve(df, sfka => key_map(uppercase)) == s.PositiveSelectionArray([ssuA])
@test s.resolve(df, -ssa => key_map(uppercase)) == s.PositiveSelectionArray([ssuB, ssuC])
@test s.resolve(df, -s1 => key_map(uppercase)) == s.PositiveSelectionArray([ssuB, ssuC])
@test s.resolve(df, -sr => key_map(uppercase)) == s.PositiveSelectionArray([ssuC])
@test s.resolve(df, -sb => key_map(uppercase)) == s.PositiveSelectionArray([ssuB])
@test s.resolve(df, -sfva => key_map(uppercase)) == s.PositiveSelectionArray([ssuB, ssuC])
@test s.resolve(df, -sfka => key_map(uppercase)) == s.PositiveSelectionArray([ssuB, ssuC])
@test s.resolve(df, [ssa] => key_map(uppercase)) == s.PositiveSelectionArray([ssuA])
@test s.resolve(df, [s1] => key_map(uppercase)) == s.PositiveSelectionArray([ssuA])
@test s.resolve(df, [sr] => key_map(uppercase)) == s.PositiveSelectionArray([ssuA, ssuB])
@test s.resolve(df, [sb] => key_map(uppercase)) == s.PositiveSelectionArray([ssuA, ssuC])
@test s.resolve(df, [sfva] => key_map(uppercase)) == s.PositiveSelectionArray([ssuA])
@test s.resolve(df, [sfka] => key_map(uppercase)) == s.PositiveSelectionArray([ssuA])
@test s.resolve(df, [-ssa] => key_map(uppercase)) == s.PositiveSelectionArray([ssuB, ssuC])
@test s.resolve(df, [-s1] => key_map(uppercase)) == s.PositiveSelectionArray([ssuB, ssuC])
@test s.resolve(df, [-sr] => key_map(uppercase)) == s.PositiveSelectionArray([ssuC])
@test s.resolve(df, [-sb] => key_map(uppercase)) == s.PositiveSelectionArray([ssuB])
@test s.resolve(df, [-sfva] => key_map(uppercase)) == s.PositiveSelectionArray([ssuB, ssuC])
@test s.resolve(df, [-sfka] => key_map(uppercase)) == s.PositiveSelectionArray([ssuB, ssuC])
@test s.resolve(df, (ssa,) => key_map(uppercase)) == s.PositiveSelectionArray([ssuA])
@test s.resolve(df, (s1,) => key_map(uppercase)) == s.PositiveSelectionArray([ssuA])
@test s.resolve(df, (sr,) => key_map(uppercase)) == s.PositiveSelectionArray([ssuA, ssuB])
@test s.resolve(df, (sb,) => key_map(uppercase)) == s.PositiveSelectionArray([ssuA, ssuC])
@test s.resolve(df, (sfva,) => key_map(uppercase)) == s.PositiveSelectionArray([ssuA])
@test s.resolve(df, (sfka,) => key_map(uppercase)) == s.PositiveSelectionArray([ssuA])
@test s.resolve(df, (-ssa,) => key_map(uppercase)) == s.PositiveSelectionArray([ssuB, ssuC])
@test s.resolve(df, (-s1,) => key_map(uppercase)) == s.PositiveSelectionArray([ssuB, ssuC])
@test s.resolve(df, (-sr,) => key_map(uppercase)) == s.PositiveSelectionArray([ssuC])
@test s.resolve(df, (-sb,) => key_map(uppercase)) == s.PositiveSelectionArray([ssuB])
@test s.resolve(df, (-sfva,) => key_map(uppercase)) == s.PositiveSelectionArray([ssuB, ssuC])
@test s.resolve(df, (-sfka,) => key_map(uppercase)) == s.PositiveSelectionArray([ssuB, ssuC])
@test s.resolve(df, (ssa => :A) | (ssb => :B) | (ssc => :C1)) == s.PositiveSelectionArray([ssA, ssB, ssC])
@test s.resolve(df, (ssa => :A) & (ssb => :B) | (ssc => :C1)) == s.PositiveSelectionArray([ssC])
@test s.resolve(df, [ssa => :A, ssb => :B, ssc => :C1]) == s.PositiveSelectionArray([[ssA],[ssB],[ssC]])
@test s.resolve(df, [sr => [:A, :B], sfva => :A, sfka => :A]) == s.PositiveSelectionArray([[ssA, ssB], [ssA], [ssA]])
@test s.resolve(df, [sr => [:A, :B], sfva => :A, [ssa => :A, ssc => :C1]]) == s.PositiveSelectionArray([[ssA, ssB], [ssA], [[ssA], [ssC]]])
end
@testset "resolutions rest" begin
@test s.resolve(df, rest()) == s.Complement(s.SelectionRename(identity), identity)
@test s.resolve(df, [ssa, rest(), ssb]) == [s.PositiveSelectionArray([ssa]), s.Complement(s.SelectionRename(identity), identity), s.PositiveSelectionArray([ssb])]
@test s.resolve(df, [ssa, rest(), -ssb]) == [s.PositiveSelectionArray([ssa]), s.Complement(s.SelectionRename(identity), identity), s.PositiveSelectionArray([ssa,ssc])]
@test s.resolve(df, rest() => key_map(uppercase)) == s.Complement(s.SelectionRename(uppercase), identity)
end
end
